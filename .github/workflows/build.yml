name: Release

on:
  push:
    tag:
    - v*

jobs:
  build:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - name: "Checkout Project"
        uses: actions/checkout@v2

      #
      # Setup
      #

      - name: "Select Xcode 13.2"
        uses: devbotsxyz/xcode-select@v1
        with:
          version: "13.2"

      # - name: "Import Certificate: Development"
      #   uses: devbotsxyz/import-signing-certificate@main
      #   with:
      #     certificate-data: ${{ secrets.DEVELOPMENT_CERTIFICATE_DATA }}
      #     certificate-passphrase: ${{ secrets.DEVELOPMENT_CERTIFICATE_PASSPHRASE }}
      #     keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      # - name: "Import Certificate: Distribution"
      #   uses: devbotsxyz/import-signing-certificate@main
      #   with:
      #     certificate-data: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
      #     certificate-passphrase: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
      #     keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      #
      # Fail early on failing tests.
      # Disabled because this project does not have tests. (TODO Add some example tests)
      #

      #- name: "Test"
      #  uses: devbotsxyz/xcode-test@v1


      - name: "Build"
        uses: devbotsxyz/xcode-build@v1
      #
      # First we do a developer build that we archive into an
      # .xcarchive.
      #

      # - name: "Archive"
      #   uses: devbotsxyz/xcode-archive@v1

      #
      # Next ask Xcode to export the product from the archived build
      # we just created. This will also re-sign the application with
      # the "Developer ID" certificate.
      #

      # - name: "Export & Sign Release Build"
      #   uses: devbotsxyz/xcode-export-archive@master

      #
      # Now send the product to Apple's notarization service and then
      # staple it.
      #

      # - name: "Notarize Release Build"
      #   uses: devbotsxyz/xcode-notarize@v1
      #   with:
      #     product-path: "Export/Rings.app"
      #     appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
      #     appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      # - name: "Staple Release Build"
      #   uses: devbotsxyz/xcode-staple@v1
      #   with:
      #     product-path: "Export/Rings.app"

      #
      # Zip up the app and add it to the GitHub Release as a
      # downloadable asset.
      #


      - run: mkdir out && cp /Users/runner/Export/reaper_csurf_integrator.dylib out/reaper_csurf_integrator.dylib

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: reaper_csurf_integrator.zip
          path: out/
          if-no-files-found: error


      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: out/**/*.zip


      # - name: Package for Distribution
      #   run: ditto -V -c -k --keepParent "/Users/runner/Export/reaper_csurf_integrator.dylib" "Rings.zip"

      # - name: Release app
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: Rings.zip
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}